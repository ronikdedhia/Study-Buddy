{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"spacing\", \"shouldWrapChildren\", \"childrenStyle\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Flex from \"./Flex\";\nimport Selector from \"./Selector\";\nimport { useSpacing } from \"./SpacingFuncContext\";\nimport { getValidChildren } from \"./utilities\";\nvar Wrap = function Wrap(_ref) {\n  var _ref$spacing = _ref.spacing,\n    spacing = _ref$spacing === void 0 ? 0 : _ref$spacing,\n    _ref$shouldWrapChildr = _ref.shouldWrapChildren,\n    shouldWrapChildren = _ref$shouldWrapChildr === void 0 ? false : _ref$shouldWrapChildr,\n    childrenStyle = _ref.childrenStyle,\n    children = _ref.children,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var spacingValue = useSpacing(spacing);\n  var validChildren = getValidChildren(children);\n  var clones = !shouldWrapChildren ? validChildren : validChildren.map(function (child, index) {\n    var key = typeof child.key !== 'undefined' ? child.key : index;\n    return React.createElement(WrapItem, {\n      key: key\n    }, child);\n  });\n  return React.createElement(Flex, _extends({\n    mt: -spacing,\n    ms: -spacing,\n    inline: true,\n    wrap: true\n  }, rest), React.createElement(Selector, {\n    childrenStyle: [{\n      marginTop: spacingValue,\n      marginStart: spacingValue\n    }, childrenStyle]\n  }, clones));\n};\nexport default Wrap;\nvar WrapItem = function WrapItem(props) {\n  return React.createElement(View, props);\n};","map":{"version":3,"sources":["Wrap.tsx"],"names":["React","Flex","Selector","useSpacing","getValidChildren","Wrap","spacing","shouldWrapChildren","childrenStyle","children","rest","spacingValue","validChildren","clones","map","child","index","key","marginTop","marginStart","WrapItem","props"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAGA,OAAOC,IAAP;AAEA,OAAOC,QAAP;AACA,SAASC,UAAT;AACA,SAASC,gBAAT;AAkBA,IAAMC,IAAyB,GAAG,SAA5BA,IAAyB,CAAG,IAAA,EAM5B;EAN6B,mBAM7B,IAAA,CALJC,OAAO;IAAPA,OAAO,6BAAG,CADuB;IAAA,wBAM7B,IAAA,CAJJC,kBAAkB;IAAlBA,kBAAkB,sCAAG,KAFY;IAGjCC,aAHiC,GAM7B,IAAA,CAHJA,aAHiC;IAIjCC,QAJiC,GAM7B,IAAA,CAFJA,QAJiC;IAK9BC,IAAAA,4BACC,IAAA;EACJ,IAAMC,YAAY,GAAGR,UAAU,CAACG,OAAD,CAA/B;EAEA,IAAMM,aAAa,GAAGR,gBAAgB,CAACK,QAAD,CAAtC;EAEA,IAAMI,MAAM,GAAG,CAACN,kBAAD,GACXK,aADW,GAEX,aAAa,CAACE,GAAd,CAAkB,UAACC,KAAD,EAAQC,KAAR,EAAkB;IAClC,IAAMC,GAAG,GAAG,OAAOF,KAAK,CAACE,GAAb,KAAqB,WAArB,GAAmCF,KAAK,CAACE,GAAzC,GAA+CD,KAA3D;IACA,OAAO,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;MAAU,GAAG,EAAEC;IAAf,CAAA,EAAqBF,KAArB,CAAP;EACD,CAHD,CAFJ;EAOA,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;IAAM,EAAE,EAAE,CAACT,OAAX;IAAoB,EAAE,EAAE,CAACA,OAAzB;IAAkC,MAAM,EAAA,IAAxC;IAAyC,IAAI,EAAA;EAA7C,CAAA,EAAkDI,IAAlD,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;IACE,aAAa,EAAE,CACb;MAAEQ,SAAS,EAAEP,YAAb;MAA2BQ,WAAW,EAAER;IAAxC,CADa,EAEbH,aAFa;EADjB,CAAA,EAMGK,MANH,CADF,CADF;AAYD,CA9BD;AAgCA,eAAeR,IAAf;AAEA,IAAMe,QAAkB,GAAIC,SAAtBD,QAAkB,CAAIC,KAAD;EAAA,OAAW,KAAA,CAAA,aAAA,CAAC,IAAD,EAAUA,KAAV,CAAtC;AAAA","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector from './Selector';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface WrapProps extends FlexProps, SelectorProps {\n  /**\n   * The space between each child (even if it wraps).\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Wrap: React.FC<WrapProps> = ({\n  spacing = 0,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const validChildren = getValidChildren(children);\n\n  const clones = !shouldWrapChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        return <WrapItem key={key}>{child}</WrapItem>;\n      });\n\n  return (\n    <Flex mt={-spacing} ms={-spacing} inline wrap {...rest}>\n      <Selector\n        childrenStyle={[\n          { marginTop: spacingValue, marginStart: spacingValue },\n          childrenStyle,\n        ]}\n      >\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Wrap;\n\nconst WrapItem: React.FC = (props) => <View {...props} />;\n"]},"metadata":{},"sourceType":"module"}