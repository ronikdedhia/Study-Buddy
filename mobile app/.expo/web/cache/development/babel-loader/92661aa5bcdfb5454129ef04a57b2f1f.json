{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { StackActions, NavigationActions, SceneView } from 'react-navigation';\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    _classCallCheck(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n      if (descriptor) {\n        var _descriptor$options3 = descriptor.options,\n          gestureEnabled = _descriptor$options3.gestureEnabled,\n          animationEnabled = _descriptor$options3.animationEnabled;\n        if (animationEnabled === false) {\n          return false;\n        }\n        return gestureEnabled !== undefined ? gestureEnabled : Platform.OS !== 'android';\n      }\n      return false;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      var navigation = descriptor.navigation,\n        getComponent = descriptor.getComponent;\n      var SceneComponent = getComponent();\n      return React.createElement(SceneView, {\n        screenProps: _this.props.screenProps,\n        navigation: navigation,\n        component: SceneComponent\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionComplete\", function () {\n      var _this$props = _this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation;\n      if (state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key\n        }));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      _this.handleTransitionComplete();\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(NavigationActions.navigate(route));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref5) {\n      var route = _ref5.route;\n      var _this$props3 = _this.props,\n        state = _this$props3.state,\n        navigation = _this$props3.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(StackActions.pop({\n          key: route.key,\n          prune: false\n        }));\n      } else {\n        _this.handleTransitionComplete();\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref6, closing) {\n      var route = _ref6.route;\n      var _descriptor$options$o, _descriptor$options;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o = (_descriptor$options = descriptor.options).onTransitionStart) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options, {\n        closing: closing\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref7, closing) {\n      var route = _ref7.route;\n      var _descriptor$options$o2, _descriptor$options2;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o2 = (_descriptor$options2 = descriptor.options).onTransitionEnd) === null || _descriptor$options$o2 === void 0 ? void 0 : _descriptor$options$o2.call(_descriptor$options2, {\n        closing: closing\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStart\", function () {});\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEnd\", function () {});\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureCancel\", function () {});\n    return _this;\n  }\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        state = _this$props4.state,\n        navigation = _this$props4.navigation,\n        keyboardHandlingEnabled = _this$props4.keyboardHandlingEnabled,\n        _this$props4$mode = _this$props4.mode,\n        mode = _this$props4$mode === void 0 ? 'card' : _this$props4$mode,\n        _this$props4$headerMo = _this$props4.headerMode,\n        headerMode = _this$props4$headerMo === void 0 ? mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen' : _this$props4$headerMo,\n        _ = _this$props4.descriptors,\n        rest = _objectWithoutProperties(_this$props4, _excluded);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(React.Fragment, null, React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaConsumer, null, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              mode: mode,\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              getPreviousRoute: _this2.getPreviousRoute,\n              getGesturesEnabled: _this2.getGesturesEnabled,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              headerMode: headerMode,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest, props));\n          });\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref8) {\n          var key = _ref8.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaConsumer","StackActions","NavigationActions","SceneView","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","HeaderShownContext","GestureHandlerWrapper","View","isArrayEqual","a","b","length","every","it","index","StackView","args","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","options","gestureEnabled","animationEnabled","undefined","Platform","OS","filter","r","includes","findIndex","props","navigation","getComponent","SceneComponent","screenProps","component","isTransitioning","dispatch","completeTransition","toChildKey","handleTransitionComplete","some","navigate","setState","pop","prune","closing","onTransitionStart","onTransitionEnd","render","keyboardHandlingEnabled","mode","headerMode","_","rest","style","styles","container","insets","enabled","Consumer","isParentHeaderShown","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","Component","StyleSheet","create","flex"],"sources":["StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  NavigationActions,\n  SceneView,\n} from 'react-navigation';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    this.handleTransitionComplete();\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch(NavigationActions.navigate(route));\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  private handleGestureStart = () => {\n    // Do nothing\n  };\n\n  private handleGestureEnd = () => {\n    // Do nothing\n  };\n\n  private handleGestureCancel = () => {\n    // Do nothing\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}