{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"fill\", \"inline\", \"center\", \"direction\", \"justify\", \"items\", \"self\", \"content\", \"wrap\", \"basis\", \"grow\", \"shrink\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useMemo } from 'react';\nimport Box from \"./Box\";\nvar Flex = function Flex(_ref) {\n  var fill = _ref.fill,\n    inline = _ref.inline,\n    center = _ref.center,\n    direction = _ref.direction,\n    justify = _ref.justify,\n    items = _ref.items,\n    self = _ref.self,\n    content = _ref.content,\n    wrap = _ref.wrap,\n    basis = _ref.basis,\n    grow = _ref.grow,\n    shrink = _ref.shrink,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var flex = useMemo(function () {\n    return typeof fill === 'boolean' ? fill ? 1 : undefined : fill;\n  }, [fill]);\n  var flexDirection = useMemo(function () {\n    return inline ? 'row' : direction;\n  }, [inline, direction]);\n  var justifyContent = useMemo(function () {\n    if (center) return 'center';\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      case 'evenly':\n        return 'space-evenly';\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n  var alignItems = useMemo(function () {\n    if (center) return 'center';\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return items;\n    }\n  }, [center, items]);\n  var alignSelf = useMemo(function () {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return self;\n    }\n  }, [self]);\n  var alignContent = useMemo(function () {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      default:\n        return content;\n    }\n  }, [content]);\n  var flexWrap = useMemo(function () {\n    return typeof wrap === 'boolean' ? wrap ? 'wrap' : undefined : wrap;\n  }, [wrap]);\n  var flexStyle = useMemo(function () {\n    return {\n      flex: flex,\n      flexDirection: flexDirection,\n      justifyContent: justifyContent,\n      alignItems: alignItems,\n      alignSelf: alignSelf,\n      alignContent: alignContent,\n      flexWrap: flexWrap,\n      flexBasis: basis,\n      flexGrow: grow,\n      flexShrink: shrink\n    };\n  }, [flex, flexDirection, justifyContent, alignItems, alignSelf, alignContent, flexWrap, basis, grow, shrink]);\n  return React.createElement(Box, _extends({\n    style: [flexStyle, style]\n  }, rest));\n};\nexport default Flex;\nexport var Spacer = function Spacer(props) {\n  return React.createElement(Flex, _extends({\n    fill: true,\n    self: \"stretch\"\n  }, props));\n};","map":{"version":3,"sources":["Flex.tsx"],"names":["React","useMemo","Box","Flex","fill","inline","center","direction","justify","items","self","content","wrap","basis","grow","shrink","style","rest","flex","undefined","flexDirection","justifyContent","alignItems","alignSelf","alignContent","flexWrap","flexStyle","flexBasis","flexGrow","flexShrink","Spacer","props"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport type { FlexStyle, ViewStyle } from 'react-native';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface FlexProps extends BoxProps {\n  /**\n   * Shorthand for the `flex` style property.\n   * If `true` is passed, the `flex` style property will be set to `1`.\n   */\n  fill?: boolean | number;\n\n  /**\n   * Shorthand for `{ flexDirection: \"row\" }`.\n   */\n  inline?: boolean;\n\n  /**\n   * Shorthand for `{ justifyContent: \"center\", alignItems: \"center\" }`.\n   */\n  center?: boolean;\n\n  /**\n   * Shorthand for the `flexDirection` style property.\n   */\n  direction?: FlexStyle['flexDirection'];\n\n  /**\n   * Shorthand for the `justifyContent` style property.\n   * If `center` prop is set to `true`, `justifyContent` will be forced to `center`.\n   */\n  justify?: 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly';\n\n  /**\n   * Shorthand for the `alignItems` style property.\n   * If `center` prop is set to `true`, `alignItems` will be forced to `center`.\n   */\n  items?: 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignSelf` style property.\n   */\n  self?: 'auto' | 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignContent` style property.\n   */\n  content?: 'start' | 'end' | 'center' | 'stretch' | 'between' | 'around';\n\n  /**\n   * Shorthand for the `flexWrap` style property.\n   * If `true` is passed, the `flexWrap` style property will be set to `wrap`.\n   */\n  wrap?: boolean | FlexStyle['flexWrap'];\n\n  /**\n   * Shorthand for the `flexBasis` style property.\n   */\n  basis?: FlexStyle['flexBasis'];\n\n  /**\n   * Shorthand for the `flexGrow` style property.\n   */\n  grow?: FlexStyle['flexGrow'];\n\n  /**\n   * Shorthand for the `flexShrink` style property.\n   */\n  shrink?: FlexStyle['flexShrink'];\n}\n\nconst Flex: React.FC<FlexProps> = ({\n  fill,\n  inline,\n  center,\n  direction,\n  justify,\n  items,\n  self,\n  content,\n  wrap,\n  basis,\n  grow,\n  shrink,\n  style,\n  ...rest\n}) => {\n  const flex = useMemo(\n    () => (typeof fill === 'boolean' ? (fill ? 1 : undefined) : fill),\n    [fill]\n  );\n\n  const flexDirection = useMemo(\n    () => (inline ? 'row' : direction),\n    [inline, direction]\n  );\n\n  const justifyContent = useMemo(() => {\n    if (center) return 'center';\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      case 'evenly':\n        return 'space-evenly';\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n\n  const alignItems = useMemo(() => {\n    if (center) return 'center';\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return items;\n    }\n  }, [center, items]);\n\n  const alignSelf = useMemo(() => {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return self;\n    }\n  }, [self]);\n\n  const alignContent = useMemo(() => {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      default:\n        return content;\n    }\n  }, [content]);\n\n  const flexWrap = useMemo(\n    () => (typeof wrap === 'boolean' ? (wrap ? 'wrap' : undefined) : wrap),\n    [wrap]\n  );\n\n  const flexStyle = useMemo(\n    (): ViewStyle => ({\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      flexBasis: basis,\n      flexGrow: grow,\n      flexShrink: shrink,\n    }),\n    [\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      basis,\n      grow,\n      shrink,\n    ]\n  );\n\n  return <Box style={[flexStyle, style]} {...rest} />;\n};\n\nexport default Flex;\n\nexport const Spacer: React.FC<FlexProps> = (props) => {\n  return <Flex fill self=\"stretch\" {...props} />;\n};\n"]},"metadata":{},"sourceType":"module"}