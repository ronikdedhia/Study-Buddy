{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"category\", \"elevation\", \"style\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useStyles } from \"./hooks/use-styles\";\nvar Surface = function Surface(_ref) {\n  var category = _ref.category,\n    _ref$elevation = _ref.elevation,\n    elevation = _ref$elevation === void 0 ? 0 : _ref$elevation,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var styles = useStyles(function (_ref2) {\n    var elevations = _ref2.elevations,\n      shapes = _ref2.shapes,\n      surfaceColor = _ref2.surfaceColor;\n    return {\n      surface: _objectSpread(_objectSpread(_objectSpread({}, elevations[elevation]), category ? shapes[category] : {}), {}, {\n        backgroundColor: surfaceColor(elevation).hex()\n      })\n    };\n  }, [category, elevation]);\n  return React.createElement(Animated.View, _extends({\n    style: [styles.surface, style]\n  }, rest));\n};\nexport default Surface;","map":{"version":3,"sources":["Surface.tsx"],"names":["React","useStyles","Surface","category","elevation","style","rest","styles","elevations","shapes","surfaceColor","surface","backgroundColor","hex"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAGA,SAASC,SAAT;AAkBA,IAAMC,OAA+B,GAAG,SAAlCA,OAA+B,CAAG,IAAA,EAAiD;EAAhD,IAAEC,QAAF,GAAgD,IAAA,CAA9CA,QAAF;IAAA,iBAAgD,IAAA,CAApCC,SAAS;IAATA,SAAS,+BAAG,CAAxB;IAA2BC,KAA3B,GAAgD,IAAA,CAArBA,KAA3B;IAAqCC,IAAAA,4BAAW,IAAA;EACvF,IAAMC,MAAM,GAAGN,SAAS,CACtB,UAAA,KAAA,EAAA;IAAA,IAAGO,UAAF,GAAD,KAAA,CAAGA,UAAF;MAAcC,MAAd,GAAD,KAAA,CAAeA,MAAd;MAAsBC,YAAAA,GAAvB,KAAA,CAAuBA,YAAAA;IAAvB,OAA2C;MACzCC,OAAO,gDACFH,UAAU,CAACJ,SAAD,CADN,GAEHD,QAAQ,GAAGM,MAAM,CAACN,QAAD,CAAT,GAAsB,CAAA,CAF3B;QAGPS,eAAe,EAAEF,YAAY,CAACN,SAAD,CAAZM,CAAwBG,GAAxBH;MAAAA;IAJsB,CAA3C;EAAA,CADsB,EAQtB,CAACP,QAAD,EAAWC,SAAX,CARsB,CAAxB;EAWA,OAAO,KAAA,CAAA,aAAA,CAAC,QAAD,CAAU,IAAV,EAAA,QAAA,CAAA;IAAe,KAAK,EAAE,CAACG,MAAM,CAACI,OAAR,EAAiBN,KAAjB;EAAtB,CAAA,EAAmDC,IAAnD,CAAA,CAAP;AACD,CAbD;AAeA,eAAeJ,OAAf","sourcesContent":["import React from 'react';\nimport { Animated, StyleProp, ViewProps, ViewStyle } from 'react-native';\nimport type { Elevation, ShapeCategory } from './base/ThemeContext';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface SurfaceProps extends Omit<ViewProps, 'style'> {\n  /**\n   * The relative size of the surface.\n   */\n  category?: ShapeCategory;\n\n  /**\n   * The elevation of the surface.\n   *\n   * @default 0\n   */\n  elevation?: Elevation;\n\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n}\n\nconst Surface: React.FC<SurfaceProps> = ({ category, elevation = 0, style, ...rest }) => {\n  const styles = useStyles(\n    ({ elevations, shapes, surfaceColor }) => ({\n      surface: {\n        ...elevations[elevation],\n        ...(category ? shapes[category] : {}),\n        backgroundColor: surfaceColor(elevation).hex(),\n      },\n    }),\n    [category, elevation]\n  );\n\n  return <Animated.View style={[styles.surface, style]} {...rest} />;\n};\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"module"}