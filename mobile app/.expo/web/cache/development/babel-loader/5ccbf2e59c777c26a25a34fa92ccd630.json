{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport Colors from \"../constants/colors\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ModalButton = function ModalButton(_ref) {\n  var handlePress = _ref.handlePress,\n    title = _ref.title;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    dataLoaded = _useState2[0],\n    setDataLoaded = _useState2[1];\n  var init = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        console.log(\"wait\");\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setDataLoaded(true);\n      }\n    });\n    return function init() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    init();\n  }, []);\n  if (!dataLoaded) {\n    return _jsx(View, {\n      children: _jsx(Text, {\n        children: \"Loading....\"\n      })\n    });\n  } else {\n    return _jsx(TouchableOpacity, {\n      style: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: Colors.primaryColor,\n        padding: hp(\"1.8%\"),\n        borderRadius: 15,\n        marginTop: hp(\"2%\")\n      },\n      onPress: function onPress() {\n        return handlePress;\n      },\n      children: _jsx(Text, {\n        style: {\n          color: \"white\",\n          fontFamily: \"Quicksand-Bold\",\n          fontSize: 16\n        },\n        children: title\n      })\n    });\n  }\n};\nexport default ModalButton;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","useEffect","Colors","Font","AppLoading","widthPercentageToDP","wp","heightPercentageToDP","hp","ModalButton","handlePress","title","dataLoaded","setDataLoaded","init","console","log","e","warn","justifyContent","alignItems","backgroundColor","primaryColor","padding","borderRadius","marginTop","color","fontFamily","fontSize","styles","StyleSheet","create"],"sources":["C:/Users/rudra/OneDrive/Desktop/Projects/ipd-task/app/components/modalButton.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Colors from '../constants/colors';\r\nimport { StyleSheet, SafeAreaView, Text, View, Image, TextInput, StatusBar, TouchableOpacity } from 'react-native';\r\nimport * as Font from \"expo-font\";\r\nimport { AppLoading } from \"expo\";\r\n\r\n\r\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\r\n\r\n// const fetchFonts = () => {\r\n//     console.log(\"loading font\");\r\n//     return Font.loadAsync({\r\n//         \"Quicksand-regular\": require(\"../assets/fonts/Quicksand-Regular.ttf\"),\r\n//         \"Quicksand-medium\": require(\"../assets/fonts/Quicksand-Medium.ttf\"),\r\n//         \"Quicksand-Bold\": require(\"../assets/fonts/Quicksand-Bold.ttf\"),\r\n//         \"Quicksand-SemiBold\": require(\"../assets/fonts/Quicksand-SemiBold.ttf\"),\r\n//     });\r\n// };\r\nconst ModalButton = ({ handlePress, title }) => {\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const init = async () => {\r\n        try {\r\n            // Keep on showing the SlashScreen\r\n            console.log(\"wait\");\r\n            // await fetchFonts();\r\n        } catch (e) {\r\n            console.warn(e);\r\n        } finally {\r\n            setDataLoaded(true);\r\n            // Hiding the SplashScreen\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n\r\n    if (!dataLoaded) {\r\n        return (\r\n            <View>\r\n\r\n                <Text>Loading....</Text>\r\n            </View>\r\n        );\r\n    } else {\r\n        return (\r\n\r\n            <TouchableOpacity style={{ justifyContent: \"center\", alignItems: \"center\", backgroundColor: Colors.primaryColor,padding:hp(\"1.8%\"),borderRadius:15,marginTop:hp(\"2%\") }} onPress={()=>handlePress}>\r\n\r\n                <Text style={{color:\"white\",fontFamily:\"Quicksand-Bold\",fontSize:16}}>{title}</Text>\r\n\r\n            </TouchableOpacity>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalButton;\r\nconst styles = StyleSheet.create({\r\n\r\n});"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM;AAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzC,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,SAASC,UAAU,QAAQ,MAAM;AAGjC,SAASC,mBAAmB,IAAIC,EAAE,EAAEC,oBAAoB,IAAIC,EAAE,QAAQ,gCAAgC;AAAC;AAWvG,IAAMC,WAAW,GAAG,SAAdA,WAAW,OAA+B;EAAA,IAAzBC,WAAW,QAAXA,WAAW;IAAEC,KAAK,QAALA,KAAK;EACrC,gBAAoCX,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA5CY,UAAU;IAAEC,aAAa;EAChC,IAAMC,IAAI;IAAA,8BAAG,aAAY;MACrB,IAAI;QAEAC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MAEvB,CAAC,CAAC,OAAOC,CAAC,EAAE;QACRF,OAAO,CAACG,IAAI,CAACD,CAAC,CAAC;MACnB,CAAC,SAAS;QACNJ,aAAa,CAAC,IAAI,CAAC;MAGvB;IACJ,CAAC;IAAA,gBAZKC,IAAI;MAAA;IAAA;EAAA,GAYT;EAEDb,SAAS,CAAC,YAAM;IACZa,IAAI,EAAE;EACV,CAAC,EAAE,EAAE,CAAC;EAGN,IAAI,CAACF,UAAU,EAAE;IACb,OACI,KAAC,IAAI;MAAA,UAED,KAAC,IAAI;QAAA;MAAA;IAAmB,EACrB;EAEf,CAAC,MAAM;IACH,OAEI,KAAC,gBAAgB;MAAC,KAAK,EAAE;QAAEO,cAAc,EAAE,QAAQ;QAAEC,UAAU,EAAE,QAAQ;QAAEC,eAAe,EAAEnB,MAAM,CAACoB,YAAY;QAACC,OAAO,EAACf,EAAE,CAAC,MAAM,CAAC;QAACgB,YAAY,EAAC,EAAE;QAACC,SAAS,EAACjB,EAAE,CAAC,IAAI;MAAE,CAAE;MAAC,OAAO,EAAE;QAAA,OAAIE,WAAW;MAAA,CAAC;MAAA,UAE9L,KAAC,IAAI;QAAC,KAAK,EAAE;UAACgB,KAAK,EAAC,OAAO;UAACC,UAAU,EAAC,gBAAgB;UAACC,QAAQ,EAAC;QAAE,CAAE;QAAA,UAAEjB;MAAK;IAAQ,EAErE;EAG3B;AACJ,CAAC;AAED,eAAeF,WAAW;AAC1B,IAAMoB,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC,CAEjC,CAAC,CAAC"},"metadata":{},"sourceType":"module"}