{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from \"./WebCameraUtils\";\nvar qrWorkerMethod = function qrWorkerMethod(_ref) {\n  var _parsed;\n  var data = _ref.data,\n    width = _ref.width,\n    height = _ref.height;\n  var decoded = self.jsQR(data, width, height, {\n    inversionAttempts: 'attemptBoth'\n  });\n  var parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (_unused) {\n    parsed = decoded;\n  }\n  if ((_parsed = parsed) != null && _parsed.data) {\n    var nativeEvent = {\n      type: 'qr',\n      data: parsed.data\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [parsed.location.topLeftCorner, parsed.location.bottomLeftCorner, parsed.location.topRightCorner, parsed.location.bottomRightCorner];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    autoTerminate: false\n  });\n}\nexport function useWebQRScanner(video, _ref2) {\n  var isEnabled = _ref2.isEnabled,\n    captureOptions = _ref2.captureOptions,\n    interval = _ref2.interval,\n    onScanned = _ref2.onScanned,\n    onError = _ref2.onError;\n  var isRunning = React.useRef(false);\n  var timeout = React.useRef(undefined);\n  var _useRemoteJsQR = useRemoteJsQR(),\n    _useRemoteJsQR2 = _slicedToArray(_useRemoteJsQR, 2),\n    decode = _useRemoteJsQR2[0],\n    clearWorker = _useRemoteJsQR2[1];\n  function scanAsync() {\n    return _scanAsync.apply(this, arguments);\n  }\n  function _scanAsync() {\n    _scanAsync = _asyncToGenerator(function* () {\n      if (!isRunning.current || !onScanned) {\n        stop();\n        return;\n      }\n      try {\n        var data = captureImageData(video.current, captureOptions);\n        if (data) {\n          var nativeEvent = yield decode(data);\n          if (nativeEvent != null && nativeEvent.data) {\n            onScanned({\n              nativeEvent: nativeEvent\n            });\n          }\n        }\n      } catch (error) {\n        if (onError) {\n          onError({\n            nativeEvent: error\n          });\n        }\n      } finally {\n        if (interval === 0) {\n          stop();\n          return;\n        }\n        var intervalToUse = !interval || interval < 0 ? 16 : interval;\n        timeout.current = setTimeout(function () {\n          scanAsync();\n        }, intervalToUse);\n      }\n    });\n    return _scanAsync.apply(this, arguments);\n  }\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n  React.useEffect(function () {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}","map":{"version":3,"sources":["../src/useWebQRScanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { useWorker } from '@koale/useworker';\nimport * as React from 'react';\n\nimport { BarCodeScanningResult, CameraPictureOptions, MountErrorListener } from './Camera.types';\nimport { captureImageData } from './WebCameraUtils';\n\nconst qrWorkerMethod = ({ data, width, height }: ImageData): any => {\n  // eslint-disable-next-line no-undef\n  const decoded = (self as any).jsQR(data, width, height, {\n    inversionAttempts: 'attemptBoth',\n  });\n\n  let parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch {\n    parsed = decoded;\n  }\n\n  if (parsed?.data) {\n    const nativeEvent: BarCodeScanningResult = {\n      type: 'qr',\n      data: parsed.data,\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [\n        parsed.location.topLeftCorner,\n        parsed.location.bottomLeftCorner,\n        parsed.location.topRightCorner,\n        parsed.location.bottomRightCorner,\n      ];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    autoTerminate: false,\n  });\n}\n\nexport function useWebQRScanner(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  {\n    isEnabled,\n    captureOptions,\n    interval,\n    onScanned,\n    onError,\n  }: {\n    isEnabled: boolean;\n    captureOptions: Pick<CameraPictureOptions, 'scale' | 'isImageMirror'>;\n    interval?: number;\n    onScanned?: (scanningResult: { nativeEvent: BarCodeScanningResult }) => void;\n    onError?: MountErrorListener;\n  }\n) {\n  const isRunning = React.useRef<boolean>(false);\n  const timeout = React.useRef<number | undefined>(undefined);\n\n  const [decode, clearWorker] = useRemoteJsQR();\n\n  async function scanAsync() {\n    // If interval is 0 then only scan once.\n    if (!isRunning.current || !onScanned) {\n      stop();\n      return;\n    }\n    try {\n      const data = captureImageData(video.current, captureOptions);\n\n      if (data) {\n        const nativeEvent: BarCodeScanningResult | any = await decode(data);\n        if (nativeEvent?.data) {\n          onScanned({\n            nativeEvent,\n          });\n        }\n      }\n    } catch (error) {\n      if (onError) {\n        onError({ nativeEvent: error });\n      }\n    } finally {\n      // If interval is 0 then only scan once.\n      if (interval === 0) {\n        stop();\n        return;\n      }\n      const intervalToUse = !interval || interval < 0 ? 16 : interval;\n      // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n      timeout.current = setTimeout(() => {\n        scanAsync();\n      }, intervalToUse);\n    }\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(() => {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n\n  React.useEffect(() => {\n    return () => {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}