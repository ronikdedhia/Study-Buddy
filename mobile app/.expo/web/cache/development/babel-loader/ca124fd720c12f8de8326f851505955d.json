{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport * as Utils from \"./WebCameraUtils\";\nimport { FacingModeToCameraType } from \"./WebConstants\";\nvar VALID_SETTINGS_KEYS = ['autoFocus', 'flashMode', 'exposureCompensation', 'colorTemperature', 'iso', 'brightness', 'contrast', 'saturation', 'sharpness', 'focusDistance', 'whiteBalance', 'zoom'];\nfunction useLoadedVideo(video, onLoaded) {\n  React.useEffect(function () {\n    if (video) {\n      video.addEventListener('loadedmetadata', function () {\n        requestAnimationFrame(function () {\n          onLoaded();\n        });\n      });\n    }\n  }, [video]);\n}\nexport function useWebCameraStream(video, preferredType, settings, _ref) {\n  var onCameraReady = _ref.onCameraReady,\n    onMountError = _ref.onMountError;\n  var isStartingCamera = React.useRef(false);\n  var activeStreams = React.useRef([]);\n  var capabilities = React.useRef({\n    autoFocus: 'continuous',\n    flashMode: 'off',\n    whiteBalance: 'continuous',\n    zoom: 1\n  });\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    stream = _React$useState2[0],\n    setStream = _React$useState2[1];\n  var mediaTrackSettings = React.useMemo(function () {\n    return stream ? stream.getTracks()[0].getSettings() : null;\n  }, [stream]);\n  var type = React.useMemo(function () {\n    if (!mediaTrackSettings) {\n      return null;\n    }\n    var _mediaTrackSettings$f = mediaTrackSettings.facingMode,\n      facingMode = _mediaTrackSettings$f === void 0 ? 'user' : _mediaTrackSettings$f;\n    return FacingModeToCameraType[facingMode];\n  }, [mediaTrackSettings]);\n  var getStreamDeviceAsync = React.useCallback(_asyncToGenerator(function* () {\n    try {\n      return yield Utils.getPreferredStreamDevice(preferredType);\n    } catch (nativeEvent) {\n      if (__DEV__) {\n        console.warn(\"Error requesting UserMedia for type \\\"\" + preferredType + \"\\\":\", nativeEvent);\n      }\n      if (onMountError) {\n        onMountError({\n          nativeEvent: nativeEvent\n        });\n      }\n      return null;\n    }\n  }), [preferredType, onMountError]);\n  var resumeAsync = React.useCallback(_asyncToGenerator(function* () {\n    var nextStream = yield getStreamDeviceAsync();\n    if (Utils.compareStreams(nextStream, stream)) {\n      return false;\n    }\n    if (!activeStreams.current.some(function (value) {\n      return value.id === (nextStream == null ? void 0 : nextStream.id);\n    })) {\n      activeStreams.current.push(nextStream);\n    }\n    setStream(nextStream);\n    if (onCameraReady) {\n      onCameraReady();\n    }\n    return false;\n  }), [getStreamDeviceAsync, setStream, onCameraReady, stream, activeStreams.current]);\n  React.useEffect(function () {\n    if (isStartingCamera.current) {\n      return;\n    }\n    isStartingCamera.current = true;\n    resumeAsync().then(function (isStarting) {\n      isStartingCamera.current = isStarting;\n    }).catch(function () {\n      isStartingCamera.current = false;\n    });\n  }, [preferredType]);\n  React.useEffect(function () {\n    var changes = {};\n    for (var key of Object.keys(settings)) {\n      if (!VALID_SETTINGS_KEYS.includes(key)) {\n        continue;\n      }\n      var nextValue = settings[key];\n      if (nextValue !== capabilities.current[key]) {\n        changes[key] = nextValue;\n      }\n    }\n    var hasChanges = !!Object.keys(changes).length;\n    var nextWebCameraSettings = _objectSpread(_objectSpread({}, capabilities.current), changes);\n    if (hasChanges) {\n      Utils.syncTrackCapabilities(preferredType, stream, changes);\n    }\n    capabilities.current = nextWebCameraSettings;\n  }, [settings.autoFocus, settings.flashMode, settings.exposureCompensation, settings.colorTemperature, settings.iso, settings.brightness, settings.contrast, settings.saturation, settings.sharpness, settings.focusDistance, settings.whiteBalance, settings.zoom]);\n  React.useEffect(function () {\n    if (!video.current) {\n      return;\n    }\n    Utils.setVideoSource(video.current, stream);\n  }, [video.current, stream]);\n  React.useEffect(function () {\n    return function () {\n      for (var _stream of activeStreams.current) {\n        Utils.stopMediaStream(_stream);\n      }\n      if (video.current) {\n        Utils.setVideoSource(video.current, stream);\n      }\n    };\n  }, []);\n  useLoadedVideo(video.current, function () {\n    Utils.syncTrackCapabilities(preferredType, stream, capabilities.current);\n  });\n  return {\n    type: type,\n    mediaTrackSettings: mediaTrackSettings\n  };\n}","map":{"version":3,"sources":["../src/useWebCameraStream.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport * as React from 'react';\n\nimport {\n  CameraReadyListener,\n  CameraType,\n  MountErrorListener,\n  WebCameraSettings,\n} from './Camera.types';\nimport * as Utils from './WebCameraUtils';\nimport { FacingModeToCameraType } from './WebConstants';\n\nconst VALID_SETTINGS_KEYS = [\n  'autoFocus',\n  'flashMode',\n  'exposureCompensation',\n  'colorTemperature',\n  'iso',\n  'brightness',\n  'contrast',\n  'saturation',\n  'sharpness',\n  'focusDistance',\n  'whiteBalance',\n  'zoom',\n];\n\nfunction useLoadedVideo(video: HTMLVideoElement | null, onLoaded: () => void) {\n  React.useEffect(() => {\n    if (video) {\n      video.addEventListener('loadedmetadata', () => {\n        // without this async block the constraints aren't properly applied to the camera,\n        // this means that if you were to turn on the torch and swap to the front camera,\n        // then swap back to the rear camera the torch setting wouldn't be applied.\n        requestAnimationFrame(() => {\n          onLoaded();\n        });\n      });\n    }\n  }, [video]);\n}\n\nexport function useWebCameraStream(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  preferredType: CameraType,\n  settings: Record<string, any>,\n  {\n    onCameraReady,\n    onMountError,\n  }: { onCameraReady?: CameraReadyListener; onMountError?: MountErrorListener }\n): {\n  type: CameraType | null;\n  mediaTrackSettings: MediaTrackSettings | null;\n} {\n  const isStartingCamera = React.useRef<boolean | null>(false);\n  const activeStreams = React.useRef<MediaStream[]>([]);\n  const capabilities = React.useRef<WebCameraSettings>({\n    autoFocus: 'continuous',\n    flashMode: 'off',\n    whiteBalance: 'continuous',\n    zoom: 1,\n  });\n  const [stream, setStream] = React.useState<MediaStream | null>(null);\n\n  const mediaTrackSettings = React.useMemo(() => {\n    return stream ? stream.getTracks()[0].getSettings() : null;\n  }, [stream]);\n\n  // The actual camera type - this can be different from the incoming camera type.\n  const type = React.useMemo(() => {\n    if (!mediaTrackSettings) {\n      return null;\n    }\n    // On desktop no value will be returned, in this case we should assume the cameraType is 'front'\n    const { facingMode = 'user' } = mediaTrackSettings;\n    return FacingModeToCameraType[facingMode];\n  }, [mediaTrackSettings]);\n\n  const getStreamDeviceAsync = React.useCallback(async (): Promise<MediaStream | null> => {\n    try {\n      return await Utils.getPreferredStreamDevice(preferredType);\n    } catch (nativeEvent) {\n      if (__DEV__) {\n        console.warn(`Error requesting UserMedia for type \"${preferredType}\":`, nativeEvent);\n      }\n      if (onMountError) {\n        onMountError({ nativeEvent });\n      }\n      return null;\n    }\n  }, [preferredType, onMountError]);\n\n  const resumeAsync = React.useCallback(async (): Promise<boolean> => {\n    const nextStream = await getStreamDeviceAsync();\n    if (Utils.compareStreams(nextStream, stream)) {\n      // Do nothing if the streams are the same.\n      // This happens when the device only supports one camera (i.e. desktop) and the mode was toggled between front/back while already active.\n      // Without this check there is a screen flash while the video switches.\n      return false;\n    }\n\n    // Save a history of all active streams (usually 2+) so we can close them later.\n    // Keeping them open makes swapping camera types much faster.\n    if (!activeStreams.current.some((value) => value.id === nextStream?.id)) {\n      activeStreams.current.push(nextStream!);\n    }\n\n    // Set the new stream -> update the video, settings, and actual camera type.\n    setStream(nextStream);\n    if (onCameraReady) {\n      onCameraReady();\n    }\n    return false;\n  }, [getStreamDeviceAsync, setStream, onCameraReady, stream, activeStreams.current]);\n\n  React.useEffect(() => {\n    // Restart the camera and guard concurrent actions.\n    if (isStartingCamera.current) {\n      return;\n    }\n    isStartingCamera.current = true;\n\n    resumeAsync()\n      .then((isStarting) => {\n        isStartingCamera.current = isStarting;\n      })\n      .catch(() => {\n        // ensure the camera can be started again.\n        isStartingCamera.current = false;\n      });\n  }, [preferredType]);\n\n  // Update the native camera with any custom capabilities.\n  React.useEffect(() => {\n    const changes: WebCameraSettings = {};\n\n    for (const key of Object.keys(settings)) {\n      if (!VALID_SETTINGS_KEYS.includes(key)) {\n        continue;\n      }\n      const nextValue = settings[key];\n      if (nextValue !== capabilities.current[key]) {\n        changes[key] = nextValue;\n      }\n    }\n\n    // Only update the native camera if changes were found\n    const hasChanges = !!Object.keys(changes).length;\n\n    const nextWebCameraSettings = { ...capabilities.current, ...changes };\n    if (hasChanges) {\n      Utils.syncTrackCapabilities(preferredType, stream, changes);\n    }\n\n    capabilities.current = nextWebCameraSettings;\n  }, [\n    settings.autoFocus,\n    settings.flashMode,\n    settings.exposureCompensation,\n    settings.colorTemperature,\n    settings.iso,\n    settings.brightness,\n    settings.contrast,\n    settings.saturation,\n    settings.sharpness,\n    settings.focusDistance,\n    settings.whiteBalance,\n    settings.zoom,\n  ]);\n\n  React.useEffect(() => {\n    // set or unset the video source.\n    if (!video.current) {\n      return;\n    }\n    Utils.setVideoSource(video.current, stream);\n  }, [video.current, stream]);\n\n  React.useEffect(() => {\n    return () => {\n      // Clean up on dismount, this is important for making sure the camera light goes off when the component is removed.\n      for (const stream of activeStreams.current) {\n        // Close all open streams.\n        Utils.stopMediaStream(stream);\n      }\n      if (video.current) {\n        // Invalidate the video source.\n        Utils.setVideoSource(video.current, stream);\n      }\n    };\n  }, []);\n\n  // Update props when the video loads.\n  useLoadedVideo(video.current, () => {\n    Utils.syncTrackCapabilities(preferredType, stream, capabilities.current);\n  });\n\n  return {\n    type,\n    mediaTrackSettings,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}