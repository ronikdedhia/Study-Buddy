{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toArray from \"@babel/runtime/helpers/toArray\";\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get currency() {\n    return null;\n  },\n  get decimalSeparator() {\n    return 1.1.toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator() {\n    var value = 1000 .toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL() {\n    var _rtlDetect$isRtlLang;\n    return (_rtlDetect$isRtlLang = rtlDetect.isRtlLang(this.locale)) != null ? _rtlDetect$isRtlLang : false;\n  },\n  get isMetric() {\n    var region = this.region;\n    switch (region) {\n      case 'US':\n      case 'LR':\n      case 'MM':\n        return false;\n    }\n    return true;\n  },\n  get locale() {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n  get locales() {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    var _navigator = navigator,\n      _navigator$languages = _navigator.languages,\n      languages = _navigator$languages === void 0 ? [] : _navigator$languages;\n    return Array.from(languages);\n  },\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes() {\n    return [];\n  },\n  get region() {\n    var locale = this.locale;\n    var _ref = typeof locale === 'string' ? locale.split('-') : [],\n      _ref2 = _toArray(_ref),\n      suffixes = _ref2.slice(1);\n    for (var suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  getLocalizationAsync: function () {\n    var _getLocalizationAsync = _asyncToGenerator(function* () {\n      var currency = this.currency,\n        decimalSeparator = this.decimalSeparator,\n        digitGroupingSeparator = this.digitGroupingSeparator,\n        isoCurrencyCodes = this.isoCurrencyCodes,\n        isMetric = this.isMetric,\n        isRTL = this.isRTL,\n        locale = this.locale,\n        locales = this.locales,\n        region = this.region,\n        timezone = this.timezone;\n      return {\n        currency: currency,\n        decimalSeparator: decimalSeparator,\n        digitGroupingSeparator: digitGroupingSeparator,\n        isoCurrencyCodes: isoCurrencyCodes,\n        isMetric: isMetric,\n        isRTL: isRTL,\n        locale: locale,\n        locales: locales,\n        region: region,\n        timezone: timezone\n      };\n    });\n    function getLocalizationAsync() {\n      return _getLocalizationAsync.apply(this, arguments);\n    }\n    return getLocalizationAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoLocalization.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get currency(): string | null {\n    // TODO: Add support\n    return null;\n  },\n  get decimalSeparator(): string {\n    return (1.1).toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator(): string {\n    const value = (1000).toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get isMetric(): boolean {\n    const { region } = this;\n    switch (region) {\n      case 'US': // USA\n      case 'LR': // Liberia\n      case 'MM': // Myanmar\n        return false;\n    }\n    return true;\n  },\n  get locale(): string {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n  get region(): string | null {\n    // There is no way to obtain the current region, as is possible on native.\n    // Instead, use the country-code from the locale when possible (e.g. \"en-US\").\n    const { locale } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}