{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useMemo } from 'react';\nimport { useSpacingFunc } from 'react-native-flex-layout';\nimport { useTheme } from \"../base/ThemeContext\";\nimport { useWindowSizeClass } from \"../base/WindowSizeClassContext\";\nimport { useWindowSize } from \"./use-window-size\";\nimport { useSurfaceScale } from \"./use-surface-scale\";\nimport { useSurfaceColor } from \"./use-surface-color\";\nexport var useStyles = function useStyles(factory, deps) {\n  var theme = useTheme();\n  var surfaceScale = useSurfaceScale();\n  var surfaceColor = useSurfaceColor();\n  var windowSizeClass = useWindowSizeClass();\n  var windowSize = useWindowSize();\n  var spacing = useSpacingFunc();\n  return useMemo(function () {\n    return factory(_objectSpread(_objectSpread({}, theme), {}, {\n      surfaceScale: surfaceScale,\n      surfaceColor: surfaceColor,\n      windowSizeClass: windowSizeClass,\n      windowSize: windowSize,\n      spacing: spacing\n    }));\n  }, [factory, theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing, deps]);\n};","map":{"version":3,"sources":["use-styles.ts"],"names":["useMemo","useSpacingFunc","useTheme","useWindowSizeClass","useWindowSize","useSurfaceScale","useSurfaceColor","useStyles","factory","deps","theme","surfaceScale","surfaceColor","windowSizeClass","windowSize","spacing"],"mappings":";;;AAAA,SAAyBA,OAAzB,QAAwC,OAAxC;AAGA,SAAsBC,cAAtB,QAA4C,0BAA5C;AACA,SAAgBC,QAAhB;AACA,SAASC,kBAAT;AACA,SAASC,aAAT;AACA,SAASC,eAAT;AACA,SAASC,eAAT;AAIA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAS,CACpBC,OADuB,EAUvBC,IAVuB,EAWjB;EACN,IAAMC,KAAK,GAAGR,QAAQ,EAAtB;EACA,IAAMS,YAAY,GAAGN,eAAe,EAApC;EACA,IAAMO,YAAY,GAAGN,eAAe,EAApC;EACA,IAAMO,eAAe,GAAGV,kBAAkB,EAA1C;EACA,IAAMW,UAAU,GAAGV,aAAa,EAAhC;EACA,IAAMW,OAAO,GAAGd,cAAc,EAA9B;EAEA,OAAOD,OAAO,CACZ;IAAA,OAAMQ,OAAO,iCAAME,KAAL;MAAYC,YAAZ,EAAYA,YAAZ;MAA0BC,YAA1B,EAA0BA,YAA1B;MAAwCC,eAAxC,EAAwCA,eAAxC;MAAyDC,UAAzD,EAAyDA,UAAzD;MAAqEC,OAAAA,EAAAA;IAAAA,GADvE;EAAA,GAEZ,CAACP,OAAD,EAAUE,KAAV,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,eAA7C,EAA8DC,UAA9D,EAA0EC,OAA1E,EAAmFN,IAAnF,CAFY,CAAd;AAID,CAvBM","sourcesContent":["import { DependencyList, useMemo } from 'react';\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\nimport type chroma from 'chroma-js';\nimport { SpacingFunc, useSpacingFunc } from 'react-native-flex-layout';\nimport { Theme, useTheme } from '../base/ThemeContext';\nimport { useWindowSizeClass, WindowSizeClass } from '../base/WindowSizeClassContext';\nimport { useWindowSize, WindowSize } from './use-window-size';\nimport { useSurfaceScale } from './use-surface-scale';\nimport { useSurfaceColor } from './use-surface-color';\n\ntype NamedStyles<T> = { [P in keyof T]: ViewStyle | TextStyle | ImageStyle };\n\nexport const useStyles = <T extends NamedStyles<T>>(\n  factory: (\n    utils: Theme & {\n      surfaceScale: chroma.Scale<chroma.Color>;\n      surfaceColor: chroma.Scale<chroma.Color>;\n      windowSizeClass: WindowSizeClass;\n      windowSize: WindowSize;\n      spacing: SpacingFunc;\n    }\n  ) => T,\n  deps?: DependencyList | undefined\n): T => {\n  const theme = useTheme();\n  const surfaceScale = useSurfaceScale();\n  const surfaceColor = useSurfaceColor();\n  const windowSizeClass = useWindowSizeClass();\n  const windowSize = useWindowSize();\n  const spacing = useSpacingFunc();\n\n  return useMemo(\n    () => factory({ ...theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing }),\n    [factory, theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing, deps]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}