{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"color\", \"style\", \"contentContainerStyle\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"./Pressable\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nvar styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden'\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'on-background' : _ref$color,\n    style = _ref.style,\n    contentContainerStyle = _ref.contentContainerStyle,\n    pressEffect = _ref.pressEffect,\n    pressEffectColor = _ref.pressEffectColor,\n    onPress = _ref.onPress,\n    onPressIn = _ref.onPressIn,\n    onPressOut = _ref.onPressOut,\n    onLongPress = _ref.onLongPress,\n    onBlur = _ref.onBlur,\n    onFocus = _ref.onFocus,\n    onMouseEnter = _ref.onMouseEnter,\n    onMouseLeave = _ref.onMouseLeave,\n    delayLongPress = _ref.delayLongPress,\n    disabled = _ref.disabled,\n    hitSlop = _ref.hitSlop,\n    pressRetentionOffset = _ref.pressRetentionOffset,\n    android_disableSound = _ref.android_disableSound,\n    android_ripple = _ref.android_ripple,\n    testOnly_pressed = _ref.testOnly_pressed,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var palette = usePaletteColor(color);\n  return React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest), React.createElement(Pressable, {\n    style: [StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : palette.main,\n    onPress: onPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, icon ? typeof icon === 'function' ? icon({\n    color: palette.main,\n    size: 24\n  }) : icon : null));\n};\nexport default IconButton;","map":{"version":3,"sources":["IconButton.tsx"],"names":["React","Pressable","usePaletteColor","styles","create","container","width","height","borderRadius","overflow","contentContainer","justifyContent","alignItems","IconButton","icon","color","style","contentContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","palette","StyleSheet","absoluteFill","main","size"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface IconButtonProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The element to render as the icon.\n   */\n  icon?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The color of the icon and the press effect.\n   *\n   * @default \"on-background\"\n   */\n  color?: Color;\n\n  /**\n   * The style of the icon's container view.\n   */\n  contentContainerStyle?: PressableProps['style'];\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst IconButton: React.FC<IconButtonProps> = ({\n  icon,\n  color = 'on-background',\n  style,\n  contentContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color);\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      <Pressable\n        style={[StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle]}\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? palette.main}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n      >\n        {icon ? (typeof icon === 'function' ? icon({ color: palette.main, size: 24 }) : icon) : null}\n      </Pressable>\n    </View>\n  );\n};\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module"}