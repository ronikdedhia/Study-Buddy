{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Platform } from 'expo-modules-core';\nimport CameraManager from \"../ExponentCameraManager\";\nexport var ConversionTables = {\n  type: CameraManager.Type,\n  flashMode: CameraManager.FlashMode,\n  autoFocus: CameraManager.AutoFocus,\n  whiteBalance: CameraManager.WhiteBalance\n};\nexport function convertNativeProps(props) {\n  if (!props || typeof props !== 'object') {\n    return {};\n  }\n  var nativeProps = {};\n  for (var _ref of Object.entries(props)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var value = _ref2[1];\n    if (typeof value === 'string' && ConversionTables[key]) {\n      nativeProps[key] = ConversionTables[key][value];\n    } else {\n      nativeProps[key] = value;\n    }\n  }\n  return nativeProps;\n}\nexport function ensureNativeProps(props) {\n  var newProps = convertNativeProps(props);\n  if (newProps.onBarCodeScanned) {\n    newProps.barCodeScannerEnabled = true;\n  }\n  if (newProps.onFacesDetected) {\n    newProps.faceDetectorEnabled = true;\n  }\n  if (Platform.OS !== 'android') {\n    delete newProps.ratio;\n    delete newProps.useCamera2Api;\n  }\n  if (Platform.OS !== 'web') {\n    delete newProps.poster;\n  }\n  return newProps;\n}","map":{"version":3,"sources":["../../src/utils/props.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,QAAQ,mBAAmB;AAU5C,OAAO,aAAa;AAGpB,OAAO,IAAM,gBAAgB,GAKzB;EACF,IAAI,EAAE,aAAa,CAAC,IAAI;EACxB,SAAS,EAAE,aAAa,CAAC,SAAS;EAClC,SAAS,EAAE,aAAa,CAAC,SAAS;EAClC,YAAY,EAAE,aAAa,CAAC;CAC7B;AAED,OAAM,SAAU,kBAAkB,CAAC,KAAmB,EAAA;EACpD,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IACvC,OAAO,CAAA,CAAE;EACV;EAED,IAAM,WAAW,GAAsB,CAAA,CAAE;EAEzC,iBAA2B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IAAA;IAAA,IAAtC,GAAG;IAAA,IAAE,KAAK;IACpB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE;MACtD,WAAW,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;KAChD,MAAM;MACL,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK;IACzB;EACF;EAED,OAAO,WAAW;AACpB;AAEA,OAAM,SAAU,iBAAiB,CAAC,KAAmB,EAAA;EACnD,IAAM,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC;EAE1C,IAAI,QAAQ,CAAC,gBAAgB,EAAE;IAC7B,QAAQ,CAAC,qBAAqB,GAAG,IAAI;EACtC;EAED,IAAI,QAAQ,CAAC,eAAe,EAAE;IAC5B,QAAQ,CAAC,mBAAmB,GAAG,IAAI;EACpC;EAED,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;IAC7B,OAAO,QAAQ,CAAC,KAAK;IACrB,OAAO,QAAQ,CAAC,aAAa;EAC9B;EAED,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IACzB,OAAO,QAAQ,CAAC,MAAM;EACvB;EAED,OAAO,QAAQ;AACjB","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport {\n  CameraNativeProps,\n  CameraType,\n  FlashMode,\n  AutoFocus,\n  WhiteBalance,\n  CameraProps,\n} from '../Camera.types';\nimport CameraManager from '../ExponentCameraManager';\n\n// Values under keys from this object will be transformed to native options\nexport const ConversionTables: {\n  type: Record<keyof typeof CameraType, CameraNativeProps['type']>;\n  flashMode: Record<keyof typeof FlashMode, CameraNativeProps['flashMode']>;\n  autoFocus: Record<keyof typeof AutoFocus, CameraNativeProps['autoFocus']>;\n  whiteBalance: Record<keyof typeof WhiteBalance, CameraNativeProps['whiteBalance']>;\n} = {\n  type: CameraManager.Type,\n  flashMode: CameraManager.FlashMode,\n  autoFocus: CameraManager.AutoFocus,\n  whiteBalance: CameraManager.WhiteBalance,\n};\n\nexport function convertNativeProps(props?: CameraProps): CameraNativeProps {\n  if (!props || typeof props !== 'object') {\n    return {};\n  }\n\n  const nativeProps: CameraNativeProps = {};\n\n  for (const [key, value] of Object.entries(props)) {\n    if (typeof value === 'string' && ConversionTables[key]) {\n      nativeProps[key] = ConversionTables[key][value];\n    } else {\n      nativeProps[key] = value;\n    }\n  }\n\n  return nativeProps;\n}\n\nexport function ensureNativeProps(props?: CameraProps): CameraNativeProps {\n  const newProps = convertNativeProps(props);\n\n  if (newProps.onBarCodeScanned) {\n    newProps.barCodeScannerEnabled = true;\n  }\n\n  if (newProps.onFacesDetected) {\n    newProps.faceDetectorEnabled = true;\n  }\n\n  if (Platform.OS !== 'android') {\n    delete newProps.ratio;\n    delete newProps.useCamera2Api;\n  }\n\n  if (Platform.OS !== 'web') {\n    delete newProps.poster;\n  }\n\n  return newProps;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}