{"ast":null,"code":"import React, { useEffect, useMemo, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"./Text\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useStyles } from \"./hooks/use-styles\";\nvar Badge = function Badge(_ref) {\n  var label = _ref.label,\n    _ref$showZero = _ref.showZero,\n    showZero = _ref$showZero === void 0 ? false : _ref$showZero,\n    _ref$max = _ref.max,\n    max = _ref$max === void 0 ? 99 : _ref$max,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'secondary' : _ref$color,\n    tintColor = _ref.tintColor,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    children = _ref.children;\n  var palette = usePaletteColor(color, tintColor);\n  var styles = useStyles(function () {\n    return {\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10\n      }\n    };\n  }, [palette]);\n  var isVisible = useMemo(function () {\n    return label === 0 ? visible && showZero : visible;\n  }, [label, showZero, visible]);\n  var animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n  useEffect(function () {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [isVisible]);\n  var getLabel = function getLabel() {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"body2\",\n          style: [{\n            color: palette.on\n          }, labelStyle]\n        }, typeof label === 'number' && label > max ? max + \"+\" : label);\n      case 'function':\n        return label({\n          color: palette.on\n        });\n      default:\n        return label;\n    }\n  };\n  return React.createElement(Animated.View, {\n    style: [styles.container, {\n      transform: [{\n        scale: animated\n      }]\n    }, style]\n  }, getLabel(), children);\n};\nexport default Badge;","map":{"version":3,"sources":["Badge.tsx"],"names":["React","useEffect","useMemo","useRef","Text","usePaletteColor","useStyles","Badge","label","showZero","max","visible","color","tintColor","style","labelStyle","children","palette","styles","container","minWidth","height","justifyContent","alignItems","paddingHorizontal","backgroundColor","main","borderRadius","isVisible","animated","Animated","Value","current","timing","toValue","duration","useNativeDriver","start","getLabel","on","transform","scale"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Animated, StyleProp, TextStyle, ViewProps } from 'react-native';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface BadgeProps {\n  label?: number | string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  showZero?: boolean;\n\n  max?: number;\n\n  visible?: boolean;\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  style?: Animated.AnimatedProps<ViewProps>['style'];\n\n  labelStyle?: StyleProp<TextStyle>;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  label,\n  showZero = false,\n  max = 99,\n  visible = true,\n  color = 'secondary',\n  tintColor,\n  style,\n  labelStyle,\n  children,\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10,\n      },\n    }),\n    [palette]\n  );\n\n  const isVisible = useMemo(() => (label === 0 ? visible && showZero : visible), [label, showZero, visible]);\n\n  const animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [isVisible]);\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return (\n          <Text variant=\"body2\" style={[{ color: palette.on }, labelStyle]}>\n            {typeof label === 'number' && label > max ? `${max}+` : label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  return (\n    <Animated.View style={[styles.container, { transform: [{ scale: animated }] }, style]}>\n      {getLabel()}\n      {children}\n    </Animated.View>\n  );\n};\n\nexport default Badge;\n"]},"metadata":{},"sourceType":"module"}